/* Exported from KeYmaera X v4.9.5 */
/* WARNING:  no proof.  This is a skeleton for modeling dynamics and control in the poacher, ranger, target game.  */

Theorem "starlab-dynamics"

Definitions /* CONSTANTS */
  Real maxVp; /* max poacher velocity */
  Real maxVr; /* max ranger velocity */
  Real maxVt; /* max target velocity */
  
  Real killr; /* how close poacher should be to kill target */
  Real capr; /* how close ranger should be to catch poacher */
  
  /* functions */
  Real distancesq(Real x1, Real x2, Real y1, Real y2) = (x2-x1)^2 + (y2-y1)^2;
  
  /* Hybrid Programs */
  HP rangerStay ::= {dxR1:=0; dyR1 :=0;}; /* this strategy keeps ranger at rest */
  HP rangerGo ::= {dxR1:=dxT1; dyR1:=dyT1}; /* this strategy assumes ranger observes prey velocity and copies*/
End.

ProgramVariables /* GAME STATE */
  /* poacher position and velocity */
  Real xP1;
  Real yP1;
  Real dxP1;
  Real dyP1;

  /* ranger position and velocity */
  Real xR1;
  Real yR1;
  Real dxR1;
  Real dyR1;
  
  /* target position and velocity */
  Real xT1;
  Real yT1;
  Real dxT1;
  Real dyT1;
End.

Problem
  (killr = 0 & maxVt >= 0 & maxVr >= 0 & maxVp >=0 & T>0) /* Initial conditions */
  ->
  [
    /* Target chooses initial position (& velocity) */
    xT1 := *; yT1 := *;
    /* Ranger chooses initial position (& velocity) [NOTE: demonic choice] */
    {xR1 := *; yR1 := *;}^@;
    /* Poacher position */
    xP1 := *; yP1 := *;
    ?(distancesq(xP1, xT1, yP1, yT1) > (2*maxVp*T+killr)^2); /* must start far enough away */
    {
      /* Target Control */
      dxT1 := *; dyT1 := *; ?(dxT1^2 + dyT1^2 <= maxVt^2);
      /* Ranger Control, generally predefined */
      {rangerStay; ?(dxR1^2 + dyR1^2 <= maxVr^2);}^@;
      /* Poacher Control */
      dxP1 := *; dyP1 := *; ?(dxP1^2 + dyP1^2 <= maxVp^2);

      /* Dynamics */
      {xP1' = dxP1, yP1' = dyP1, 
       xR1' = dxR1, yR1' = dyR1, 
       xT1' = dxT1, yT1' = dyT1 & 
          distancesq(xP1, xR1, yP1, yR1) >= capr^2  &  /* poacher caught -> ranger win */
          distancesq(xP1, xT1, yP1, yT1) >= killr^2 &  /* target caught -> poacher win */
      };
      ?(distancesq(xP1, xR1, yP1, yR1)> capr^2); /* poacher responsible to ensure not caught */
    }* /* poacher can choose to continue the game */
  ]( /* Safety condition */
    distancesq(xP1, xT1, yP1, yT1) > killr^2 /* target never caught */
    )
End.
